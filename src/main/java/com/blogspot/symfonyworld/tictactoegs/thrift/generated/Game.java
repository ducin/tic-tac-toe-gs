/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.blogspot.symfonyworld.tictactoegs.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Game implements org.apache.thrift.TBase<Game, Game._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Game");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PLAYERS_FIELD_DESC = new org.apache.thrift.protocol.TField("players", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField MOVES_FIELD_DESC = new org.apache.thrift.protocol.TField("moves", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField NEXT_MOVE_FIELD_DESC = new org.apache.thrift.protocol.TField("nextMove", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GameStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GameTupleSchemeFactory());
  }

  public String id; // required
  public Map<String,Player> players; // required
  public List<Move> moves; // required
  /**
   * 
   * @see Player
   */
  public Player nextMove; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PLAYERS((short)2, "players"),
    MOVES((short)3, "moves"),
    /**
     * 
     * @see Player
     */
    NEXT_MOVE((short)4, "nextMove");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PLAYERS
          return PLAYERS;
        case 3: // MOVES
          return MOVES;
        case 4: // NEXT_MOVE
          return NEXT_MOVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAYERS, new org.apache.thrift.meta_data.FieldMetaData("players", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Player.class))));
    tmpMap.put(_Fields.MOVES, new org.apache.thrift.meta_data.FieldMetaData("moves", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Move.class))));
    tmpMap.put(_Fields.NEXT_MOVE, new org.apache.thrift.meta_data.FieldMetaData("nextMove", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Player.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Game.class, metaDataMap);
  }

  public Game() {
  }

  public Game(
    String id,
    Map<String,Player> players,
    List<Move> moves,
    Player nextMove)
  {
    this();
    this.id = id;
    this.players = players;
    this.moves = moves;
    this.nextMove = nextMove;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Game(Game other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetPlayers()) {
      Map<String,Player> __this__players = new HashMap<String,Player>();
      for (Map.Entry<String, Player> other_element : other.players.entrySet()) {

        String other_element_key = other_element.getKey();
        Player other_element_value = other_element.getValue();

        String __this__players_copy_key = other_element_key;

        Player __this__players_copy_value = other_element_value;

        __this__players.put(__this__players_copy_key, __this__players_copy_value);
      }
      this.players = __this__players;
    }
    if (other.isSetMoves()) {
      List<Move> __this__moves = new ArrayList<Move>();
      for (Move other_element : other.moves) {
        __this__moves.add(new Move(other_element));
      }
      this.moves = __this__moves;
    }
    if (other.isSetNextMove()) {
      this.nextMove = other.nextMove;
    }
  }

  public Game deepCopy() {
    return new Game(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.players = null;
    this.moves = null;
    this.nextMove = null;
  }

  public String getId() {
    return this.id;
  }

  public Game setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getPlayersSize() {
    return (this.players == null) ? 0 : this.players.size();
  }

  public void putToPlayers(String key, Player val) {
    if (this.players == null) {
      this.players = new HashMap<String,Player>();
    }
    this.players.put(key, val);
  }

  public Map<String,Player> getPlayers() {
    return this.players;
  }

  public Game setPlayers(Map<String,Player> players) {
    this.players = players;
    return this;
  }

  public void unsetPlayers() {
    this.players = null;
  }

  /** Returns true if field players is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayers() {
    return this.players != null;
  }

  public void setPlayersIsSet(boolean value) {
    if (!value) {
      this.players = null;
    }
  }

  public int getMovesSize() {
    return (this.moves == null) ? 0 : this.moves.size();
  }

  public java.util.Iterator<Move> getMovesIterator() {
    return (this.moves == null) ? null : this.moves.iterator();
  }

  public void addToMoves(Move elem) {
    if (this.moves == null) {
      this.moves = new ArrayList<Move>();
    }
    this.moves.add(elem);
  }

  public List<Move> getMoves() {
    return this.moves;
  }

  public Game setMoves(List<Move> moves) {
    this.moves = moves;
    return this;
  }

  public void unsetMoves() {
    this.moves = null;
  }

  /** Returns true if field moves is set (has been assigned a value) and false otherwise */
  public boolean isSetMoves() {
    return this.moves != null;
  }

  public void setMovesIsSet(boolean value) {
    if (!value) {
      this.moves = null;
    }
  }

  /**
   * 
   * @see Player
   */
  public Player getNextMove() {
    return this.nextMove;
  }

  /**
   * 
   * @see Player
   */
  public Game setNextMove(Player nextMove) {
    this.nextMove = nextMove;
    return this;
  }

  public void unsetNextMove() {
    this.nextMove = null;
  }

  /** Returns true if field nextMove is set (has been assigned a value) and false otherwise */
  public boolean isSetNextMove() {
    return this.nextMove != null;
  }

  public void setNextMoveIsSet(boolean value) {
    if (!value) {
      this.nextMove = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case PLAYERS:
      if (value == null) {
        unsetPlayers();
      } else {
        setPlayers((Map<String,Player>)value);
      }
      break;

    case MOVES:
      if (value == null) {
        unsetMoves();
      } else {
        setMoves((List<Move>)value);
      }
      break;

    case NEXT_MOVE:
      if (value == null) {
        unsetNextMove();
      } else {
        setNextMove((Player)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PLAYERS:
      return getPlayers();

    case MOVES:
      return getMoves();

    case NEXT_MOVE:
      return getNextMove();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PLAYERS:
      return isSetPlayers();
    case MOVES:
      return isSetMoves();
    case NEXT_MOVE:
      return isSetNextMove();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Game)
      return this.equals((Game)that);
    return false;
  }

  public boolean equals(Game that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_players = true && this.isSetPlayers();
    boolean that_present_players = true && that.isSetPlayers();
    if (this_present_players || that_present_players) {
      if (!(this_present_players && that_present_players))
        return false;
      if (!this.players.equals(that.players))
        return false;
    }

    boolean this_present_moves = true && this.isSetMoves();
    boolean that_present_moves = true && that.isSetMoves();
    if (this_present_moves || that_present_moves) {
      if (!(this_present_moves && that_present_moves))
        return false;
      if (!this.moves.equals(that.moves))
        return false;
    }

    boolean this_present_nextMove = true && this.isSetNextMove();
    boolean that_present_nextMove = true && that.isSetNextMove();
    if (this_present_nextMove || that_present_nextMove) {
      if (!(this_present_nextMove && that_present_nextMove))
        return false;
      if (!this.nextMove.equals(that.nextMove))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Game other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Game typedOther = (Game)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayers()).compareTo(typedOther.isSetPlayers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.players, typedOther.players);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoves()).compareTo(typedOther.isSetMoves());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoves()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moves, typedOther.moves);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextMove()).compareTo(typedOther.isSetNextMove());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextMove()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextMove, typedOther.nextMove);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Game(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("players:");
    if (this.players == null) {
      sb.append("null");
    } else {
      sb.append(this.players);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("moves:");
    if (this.moves == null) {
      sb.append("null");
    } else {
      sb.append(this.moves);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nextMove:");
    if (this.nextMove == null) {
      sb.append("null");
    } else {
      sb.append(this.nextMove);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    if (players == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'players' was not present! Struct: " + toString());
    }
    if (moves == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'moves' was not present! Struct: " + toString());
    }
    if (nextMove == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nextMove' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GameStandardSchemeFactory implements SchemeFactory {
    public GameStandardScheme getScheme() {
      return new GameStandardScheme();
    }
  }

  private static class GameStandardScheme extends StandardScheme<Game> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Game struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLAYERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.players = new HashMap<String,Player>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2; // required
                  Player _val3; // required
                  _key2 = iprot.readString();
                  _val3 = Player.findByValue(iprot.readI32());
                  struct.players.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setPlayersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MOVES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.moves = new ArrayList<Move>(_list4.size);
                for (int _i5 = 0; _i5 < _list4.size; ++_i5)
                {
                  Move _elem6; // required
                  _elem6 = new Move();
                  _elem6.read(iprot);
                  struct.moves.add(_elem6);
                }
                iprot.readListEnd();
              }
              struct.setMovesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NEXT_MOVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nextMove = Player.findByValue(iprot.readI32());
              struct.setNextMoveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Game struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.players != null) {
        oprot.writeFieldBegin(PLAYERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.players.size()));
          for (Map.Entry<String, Player> _iter7 : struct.players.entrySet())
          {
            oprot.writeString(_iter7.getKey());
            oprot.writeI32(_iter7.getValue().getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.moves != null) {
        oprot.writeFieldBegin(MOVES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.moves.size()));
          for (Move _iter8 : struct.moves)
          {
            _iter8.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.nextMove != null) {
        oprot.writeFieldBegin(NEXT_MOVE_FIELD_DESC);
        oprot.writeI32(struct.nextMove.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GameTupleSchemeFactory implements SchemeFactory {
    public GameTupleScheme getScheme() {
      return new GameTupleScheme();
    }
  }

  private static class GameTupleScheme extends TupleScheme<Game> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Game struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      {
        oprot.writeI32(struct.players.size());
        for (Map.Entry<String, Player> _iter9 : struct.players.entrySet())
        {
          oprot.writeString(_iter9.getKey());
          oprot.writeI32(_iter9.getValue().getValue());
        }
      }
      {
        oprot.writeI32(struct.moves.size());
        for (Move _iter10 : struct.moves)
        {
          _iter10.write(oprot);
        }
      }
      oprot.writeI32(struct.nextMove.getValue());
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Game struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map11 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.players = new HashMap<String,Player>(2*_map11.size);
        for (int _i12 = 0; _i12 < _map11.size; ++_i12)
        {
          String _key13; // required
          Player _val14; // required
          _key13 = iprot.readString();
          _val14 = Player.findByValue(iprot.readI32());
          struct.players.put(_key13, _val14);
        }
      }
      struct.setPlayersIsSet(true);
      {
        org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.moves = new ArrayList<Move>(_list15.size);
        for (int _i16 = 0; _i16 < _list15.size; ++_i16)
        {
          Move _elem17; // required
          _elem17 = new Move();
          _elem17.read(iprot);
          struct.moves.add(_elem17);
        }
      }
      struct.setMovesIsSet(true);
      struct.nextMove = Player.findByValue(iprot.readI32());
      struct.setNextMoveIsSet(true);
    }
  }

}

